package day18;

class Bank {
	private int money = 500000;
	
	// 입금 (동기화 -> synchronized)
	public synchronized void saveMoney(int money) {
		int m = this.money;
		try {
			Thread.sleep(1000);
		} catch (Exception e) {
		}
		this.money = m + money;
	}
	
	// 출금 (동기화 -> synchronized)
	public synchronized void minusMoney(int money) {
		int m = this.money;
		try {
			Thread.sleep(1000);
		} catch (Exception e) {
		}
		this.money = m - money;
		
	}

	public int getMoney() {
		return money;
	}

	public void setMoney(int money) {
		this.money = money;
	}
}

public class Thread04 {
	
	// 계좌의 객체 생성 : 공유영역
	public static Bank myBank = new Bank();
	

	public static void main(String[] args) {
		/* critical section(임계영역 : 공유영역)
		   - 두개 이상의 스레드가 동시에 접근할 수 있는 구역
		   - 동시에 여러개의 스레드가 공유영역의 값을 가지려고 하면 충돌(교착상태-deadlock)이 발생할 수 있음
		   - 어느 한 순간 시점에 하나의 스레드만 사용 가능 : 세마포어(semaphore)
		   - 세마포어를 얻은 스레드만 접근 가능 / 나머지는 대기상태가 됨.
		   
		 * 동기화(순서화) : synchronized
		   - 동기화가 필요한 메서드 앞에 키워드로 선언 
		 */
		
		/* 예시) Bank 클래스 생성
		 * 계좌 1개 생성 : 급여통장 => 공유영역 (static)
		 * 홍길동 : hong / 부인 : hongwife
		 * 잔액 : 500000
		 * 입금 : saveMoney
		 * 출금 : minusMoney
		 * 단, 입금 출금은 동시에 불가능 --> 동기화
		 * 
		 */
		
		System.out.println("- - Bank 시작- -");
		Hong hong = new Hong();
		HongWife wife = new HongWife();
		hong.start();
		wife.start();
		
		
	}

}

class Hong extends Thread{
	// 입금

	@Override
	public void run() {
		System.out.println("홍길동님 >> 입금 시작 !!");
		Thread04.myBank.saveMoney(10000);
		System.out.println("잔액:  > "+Thread04.myBank.getMoney());
		System.out.println("홍길동님 >> 입금 종료 !!");
	} 
	
	
	
}

class HongWife extends Thread {
	// 출금

	@Override
	public void run() {
		System.out.println("홍길동 부인님 >> 출금 시작 !!");
		Thread04.myBank.minusMoney(20000);
		System.out.println("잔액:  > "+Thread04.myBank.getMoney());
		System.out.println("홍길동 부인님 >> 출금 종료 !!");
	}
	
}

























