package day16;

import java.util.Arrays;
import java.util.OptionalDouble;

public class Stream01 {

	public static void main(String[] args) {
		// Stream(스트림)
		/* - 자료구조를 복사하여 스트림 객체 생성
		   - 스트림을 이용한 스트림용 연산을 수행
		   - 연산을 수행한 스트림은 소모됨
		   - 스트림은 기존 자료를 변경할 수 없음
		   - 메서드 체이닝 방식을 사용
		   - 스트림만의 연산을 가지고 있음
		   
		 * 최종연산 > 마지막에 하나만 사용 가능
		   - forEach() : 리스트내를 순회하며 요소의 값을 얻어서 구성
		   - findFirst() : 조건에 일치하는 요소 중 가장 앞에 있는 요소 리턴
		   - findAny() : 조건에 일치하는 요소 중 가장 먼저 탐색되는 요소 리턴
		   - anyMatch() : 조건에 맞는 요소가 하나라도 있다면 true 리턴
		   - allMatch() : 모든 요소가 조건에 맞다면 true 리턴
		   - noneMatch() : 조건에 맞는 요소가 없다면 true 리턴
		   - count(), min(), max() : 요소의 개수, 작은값, 큰값을 리턴
		   - sum(), average() : 요소의 합계, 요소의 평균을 리턴
		   - collect() : 스트림 내의 요소를 수집하여 사용자가 원하는 형태로 반환
		   - toArray() : 배열로 리턴
		   - toList() : 리스트로 리턴
		   
		 * 중간연산 > 중간에 이어서 사용(중복사용가능)
		   - filter() : 조건에 맞는 결과값을 필터링해서 다음 연산한테 넘겨줌
		   - distinct() : 중복된 값 제거
		   - map() : 요소의 값을 원하는 값으로 변환 => 형변환
		   - sorted() : 정렬
		   - peek() : 작업 수행 후 스트림 자체를 리턴
		   - skip() : 스트림의 일부를 건너뜀
		   - limit() : 스트림의 일부를 잘라냄
		 */
		int arr[] = {1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1};
		int sum = 0;
		for(int i : arr) {
			sum += i;
		}
		System.out.println(sum);
		
		System.out.println("- - Stream을 이용한 합계 구하기 - -");
		// 배열을 스트림으로 구성
		int s = Arrays.stream(arr).sum();
		System.out.println(s);
		
//		IntStream is = Arrays.stream(arr);
//		System.out.println(is.sum());
//		System.out.println(is.count());  // 소모되어서 사용할 수 없음.
//		
		// count()
		Long l = Arrays.stream(arr).count();
		System.out.println(l);
		
		// average()
		// Optional : null 방지용
		OptionalDouble od = Arrays.stream(arr).average();
		System.out.println(od.getAsDouble());
		
		int s2 = Arrays.stream(arr).filter(n -> n>=5).sum(); // 매개변수가 1개니까 () 생략, 리턴안할거니까 {} 생략
		System.out.println(s2);
		
		
		
		
		
		
		
		
	}

}
